# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: quotes.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='quotes.proto',
  package='Quotes',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x0cquotes.proto\x12\x06Quotes\"!\n\x0cSubscription\x12\x11\n\tquoteType\x18\x01 \x01(\t\"+\n\x05Quote\x12\x11\n\tquoteType\x18\x01 \x01(\t\x12\x0f\n\x07message\x18\x02 \x01(\t2L\n\x0cQuotesServer\x12<\n\x11\x41\x63\x63\x65ssToTheMarket\x12\x14.Quotes.Subscription\x1a\r.Quotes.Quote\"\x00\x30\x01\x62\x06proto3')
)




_SUBSCRIPTION = _descriptor.Descriptor(
  name='Subscription',
  full_name='Quotes.Subscription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='quoteType', full_name='Quotes.Subscription.quoteType', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=57,
)


_QUOTE = _descriptor.Descriptor(
  name='Quote',
  full_name='Quotes.Quote',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='quoteType', full_name='Quotes.Quote.quoteType', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='message', full_name='Quotes.Quote.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=59,
  serialized_end=102,
)

DESCRIPTOR.message_types_by_name['Subscription'] = _SUBSCRIPTION
DESCRIPTOR.message_types_by_name['Quote'] = _QUOTE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Subscription = _reflection.GeneratedProtocolMessageType('Subscription', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTION,
  __module__ = 'quotes_pb2'
  # @@protoc_insertion_point(class_scope:Quotes.Subscription)
  ))
_sym_db.RegisterMessage(Subscription)

Quote = _reflection.GeneratedProtocolMessageType('Quote', (_message.Message,), dict(
  DESCRIPTOR = _QUOTE,
  __module__ = 'quotes_pb2'
  # @@protoc_insertion_point(class_scope:Quotes.Quote)
  ))
_sym_db.RegisterMessage(Quote)



_QUOTESSERVER = _descriptor.ServiceDescriptor(
  name='QuotesServer',
  full_name='Quotes.QuotesServer',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=104,
  serialized_end=180,
  methods=[
  _descriptor.MethodDescriptor(
    name='AccessToTheMarket',
    full_name='Quotes.QuotesServer.AccessToTheMarket',
    index=0,
    containing_service=None,
    input_type=_SUBSCRIPTION,
    output_type=_QUOTE,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_QUOTESSERVER)

DESCRIPTOR.services_by_name['QuotesServer'] = _QUOTESSERVER

# @@protoc_insertion_point(module_scope)
